{"name":"Urly-bird","tagline":"W7D4 homework","body":"# URLy Bird\r\n\r\n## Description\r\n\r\nCreate a URL shortener/bookmarking site with Django.\r\n\r\n## Objectives\r\n\r\n### Learning Objectives\r\n\r\nAfter completing this assignment, you should be able to:\r\n\r\n* Extrapolate from current Django projects to build a new project of substantial size and features\r\n* Determine which model field types to use to represent data\r\n* Translate English descriptions of data queries into Django ORM queries\r\n* Use PostgreSQL to store Django data\r\n* Make use of Bootstrap and hand-written CSS to style your application\r\n* Select generic views from Django to speed development\r\n* Generate charts via Django views\r\n* Protect access and choose behavior based on user status\r\n\r\n## Details\r\n\r\n### Deliverables\r\n\r\n* A Git repo called urly-bird containing at least:\r\n  * `README.md` file explaining how to run your project\r\n  * a `requirements.txt` file\r\n  * a Django project\r\n\r\n### Requirements  \r\n\r\n* No PEP8 or Pyflakes warnings or errors\r\n\r\n## Normal Mode\r\n\r\nCreate a Django project for a bookmarking site. Users can save URLs with\r\na title and an optional description.\r\n\r\nEach bookmark should have a unique code -- something like \"x1yrd3a\" -- for use\r\nin looking it up later. Create a route like \"/b/{code}\" that will redirect any\r\nuser -- not just logged in users -- to the bookmark associated with that code.\r\nThe route does not have to look just like the example.\r\n\r\nWhen a user -- anonymous or logged in -- uses a bookmark URL, record that user,\r\nbookmark, and timestamp. A suggested name for this model is Click, even though\r\nyou can navigate to the URL without a click by entering it in your navigation\r\nbar.\r\n\r\nThe site should have user registration, login, and logout.\r\n\r\nOn a logged in user's index page, they should see a list of the bookmarks\r\nthey've saved in reverse chronological order, paginated. The bookmark links\r\nshould use the internal short-code route, not the original URL. From this page,\r\nthey should be able to edit and delete bookmarks.\r\n\r\nA user's bookmark page should be public. When viewing a user's bookmark page\r\nwhen not that user, the links to edit and delete bookmarks should not show up.\r\n\r\nThere should also be a page to view all bookmarks for all users in reverse\r\nchronological order, paginated.\r\n\r\nThese features are restated in the following list:\r\n\r\n* Users can create an account, log in, and log out.\r\n* Users can save a URL as a bookmark with a title and an optional description.\r\n* Users can see all their bookmarks in a paginated list in reverse chronological order.\r\n* Users can edit and delete their own bookmarks.\r\n* Users can see all the bookmarks for another user in a paginated list in reverse chronological order.\r\n* Users can see all the bookmarks for all users in a paginated list in reverse chronological order.\r\n* Users can access a bookmark through a URL with a short code, allowing them to share bookmarks.\r\n* When a user accesses a bookmark, the access is recorded with the bookmark, the user -- or anonymous user -- and the timestamp.\r\n\r\nOnce you have all these features, you will need to generate a good amount of\r\nclick data. Create fake data for this. Numpy and Faker are useful libraries for\r\ncreating your fake data.\r\n\r\nAdd a stats page for each link where you can see the traffic for that link for the last 30 days in a line chart.\r\n\r\nAdd an overall stats page for each user where you can see a table of their links by popularity and their number\r\nof clicks over the last 30 days. This page should only be visible to that user.\r\n\r\n## Hard Mode\r\n\r\nFor hard mode, do everything shown above, plus any of the following features.\r\n\r\n* Allow users to create topical lists of URLs, with each list having a title and\r\noptional description.\r\n* Allow resorting of URLs on topical list pages.\r\n* Allow users to add [tags](https://en.wikipedia.org/wiki/Tag_(metadata)) to their URLs and have pages for each user + tag combo, as well as overall tag pages.\r\n* On individual link stats pages, make a table of where the clicks for your links are coming from by country. Bonus -- display this on a map.\r\n* Add an option to the individual and group stats pages where you can see stats for the last week, last 30 days, last year, or all time.\r\n* Add functional tests for all your pages.\r\n\r\n## Additional Resources\r\n\r\n* [Hashids](http://hashids.org/python/). These may be useful for creating short URLs.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}